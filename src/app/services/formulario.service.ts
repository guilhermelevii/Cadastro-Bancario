import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Sicoob } from '../models/sicoob.model';
import { BancoBrasil } from '../models/banco-brasil.model';

@Injectable({
  providedIn: 'root'
})
export class FormularioService {
  private apiUrl = 'http://localhost:3000/formulario'; // ajuste para sua API real

  constructor(private http: HttpClient) {}

  salvarSicoob(dados: Sicoob): Observable<Sicoob> {
    return this.http.post<Sicoob>(`${this.apiUrl}/sicoob`, dados);
  }

  salvarBancoBrasil(dados: BancoBrasil): Observable<BancoBrasil> {
    return this.http.post<BancoBrasil>(`${this.apiUrl}/banco-brasil`, dados);
  }
}

// üëâ Quer que eu j√° te mostre como ficaria a API fake com JSON-Server (pra voc√™ testar os POSTs sem depender do backend real)?


// Quando voc√™ criou o arquivo FormularioService.ts e injetou o HttpClient no construtor (a linha constructor(private http: HttpClient) {}), voc√™ estava dizendo ao Angular: "Ei, meu servi√ßo precisa de uma inst√¢ncia do HttpClient para funcionar".

// No entanto, o Angular n√£o sabia onde encontrar essa inst√¢ncia. Para que o Angular possa injetar o HttpClient em qualquer lugar da sua aplica√ß√£o, voc√™ precisa registrar o HttpClient como um "provider" (provedor) dispon√≠vel.

// Em aplica√ß√µes Angular standalone, esse registro √© feito no arquivo de configura√ß√£o principal, que √© o app.config.ts. Ao adicionar a linha provideHttpClient() nesse arquivo, voc√™ efetivamente disse ao Angular: "Agora sim, aqui est√° o provedor do HttpClient. De agora em diante, qualquer componente ou servi√ßo que precise dele pode pedi-lo e eu irei fornec√™-lo".

// Resumindo: O problema n√£o estava no seu c√≥digo do servi√ßo, mas na configura√ß√£o da sua aplica√ß√£o. O seu servi√ßo pedia uma depend√™ncia (HttpClient), mas a aplica√ß√£o n√£o estava configurada para "fornecer" essa depend√™ncia. Ao adicionar provideHttpClient(), voc√™ resolveu essa "falta de comunica√ß√£o".